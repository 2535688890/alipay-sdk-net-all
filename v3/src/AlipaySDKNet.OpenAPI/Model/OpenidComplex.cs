/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-04-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// OpenidComplex
    /// </summary>
    [DataContract(Name = "OpenidComplex")]
    public partial class OpenidComplex : IEquatable<OpenidComplex>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenidComplex" /> class.
        /// </summary>
        /// <param name="jsonString">11.</param>
        /// <param name="openIdList">1.</param>
        /// <param name="openid">11.</param>
        /// <param name="uid">11.</param>
        /// <param name="uidList">1.</param>
        public OpenidComplex(string jsonString = default(string), List<string> openIdList = default(List<string>), string openid = default(string), string uid = default(string), List<string> uidList = default(List<string>))
        {
            this.JsonString = jsonString;
            this.OpenIdList = openIdList;
            this.Openid = openid;
            this.Uid = uid;
            this.UidList = uidList;
        }

        /// <summary>
        /// 11
        /// </summary>
        /// <value>11</value>
        [DataMember(Name = "json_string", EmitDefaultValue = false)]
        public string JsonString { get; set; }

        /// <summary>
        /// 1
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "open_id_list", EmitDefaultValue = false)]
        public List<string> OpenIdList { get; set; }

        /// <summary>
        /// 11
        /// </summary>
        /// <value>11</value>
        [DataMember(Name = "openid", EmitDefaultValue = false)]
        public string Openid { get; set; }

        /// <summary>
        /// 11
        /// </summary>
        /// <value>11</value>
        [DataMember(Name = "uid", EmitDefaultValue = false)]
        public string Uid { get; set; }

        /// <summary>
        /// 1
        /// </summary>
        /// <value>1</value>
        [DataMember(Name = "uid_list", EmitDefaultValue = false)]
        public List<string> UidList { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OpenidComplex {\n");
            sb.Append("  JsonString: ").Append(JsonString).Append("\n");
            sb.Append("  OpenIdList: ").Append(OpenIdList).Append("\n");
            sb.Append("  Openid: ").Append(Openid).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  UidList: ").Append(UidList).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenidComplex);
        }

        /// <summary>
        /// Returns true if OpenidComplex instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenidComplex to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenidComplex input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.JsonString == input.JsonString ||
                    (this.JsonString != null &&
                    this.JsonString.Equals(input.JsonString))
                ) && 
                (
                    this.OpenIdList == input.OpenIdList ||
                    this.OpenIdList != null &&
                    input.OpenIdList != null &&
                    this.OpenIdList.SequenceEqual(input.OpenIdList)
                ) && 
                (
                    this.Openid == input.Openid ||
                    (this.Openid != null &&
                    this.Openid.Equals(input.Openid))
                ) && 
                (
                    this.Uid == input.Uid ||
                    (this.Uid != null &&
                    this.Uid.Equals(input.Uid))
                ) && 
                (
                    this.UidList == input.UidList ||
                    this.UidList != null &&
                    input.UidList != null &&
                    this.UidList.SequenceEqual(input.UidList)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.JsonString != null)
                {
                    hashCode = (hashCode * 59) + this.JsonString.GetHashCode();
                }
                if (this.OpenIdList != null)
                {
                    hashCode = (hashCode * 59) + this.OpenIdList.GetHashCode();
                }
                if (this.Openid != null)
                {
                    hashCode = (hashCode * 59) + this.Openid.GetHashCode();
                }
                if (this.Uid != null)
                {
                    hashCode = (hashCode * 59) + this.Uid.GetHashCode();
                }
                if (this.UidList != null)
                {
                    hashCode = (hashCode * 59) + this.UidList.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
