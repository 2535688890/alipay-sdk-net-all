/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-04-19
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ExpenseCtrRuleInfo
    /// </summary>
    [DataContract(Name = "ExpenseCtrRuleInfo")]
    public partial class ExpenseCtrRuleInfo : IEquatable<ExpenseCtrRuleInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExpenseCtrRuleInfo" /> class.
        /// </summary>
        /// <param name="ruleFactor">费控维度 枚举值： QUOTA_DAY（日额度）， QUOTA_MONTH（月额度），QUOTA_TOTAL（有效期总额度），QUOTA_ONCE（单次额度）， ALARM_CLOCK_TIME（时间段）， CARD_TYPE（地铁卡类型）， MEAL_MERCHANT（商户）， MCC（商户类型）， DISTRICT（区域）.</param>
        /// <param name="ruleId">费控条件ID 特殊说明：创建时由支付宝生成，无需外部传入.</param>
        /// <param name="ruleName">费控条件名称 约束：敏感词校验.</param>
        /// <param name="ruleOperator">费控条件操作符 枚举值： LT(\&quot;&lt;\&quot;,\&quot;小于\&quot;) LE(\&quot;&lt;&#x3D;\&quot;,\&quot;小于等于\&quot;) EQ(\&quot;&#x3D;\&quot;,\&quot;等于\&quot;) NE(\&quot;!&#x3D;\&quot;,\&quot;不等于\&quot;) GE(\&quot;&gt;&#x3D;\&quot;,\&quot;大于等于\&quot;) GT(\&quot;&gt;\&quot;,\&quot;大于\&quot;).</param>
        /// <param name="ruleValue">费控条件值 约束： 1）金额值以（元）为单位的数值，可以精确到小数点后两位。如费控维度：日额度（QUOTA_DAY）、月额度（QUOTA_MONTH）、有效期总额度（QUOTA_TOTAL）、单次额度（QUOTA_ONCE）对应的条件值；  2）时间段（ALARM_CLOCK_TIME）条件值按如下格式传入： 格式1：星期几格式（custom），节点支持monday/tuesday/wednesday/thursday/friday/saturday/sunday格式如下： {  \&quot;custom\&quot;: {   \&quot;monday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;],    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ],   \&quot;sunday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ]  } } 格式2：工作日/节假日模式（regular），节点支持workday/holiday两种，格式如下： {  \&quot;regular\&quot;: {   \&quot;workday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ],   \&quot;holiday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ]  } } 格式3：不限 {  \&quot;all\&quot;: true } 三种格式仅能选其一；  3）费控维度商户（MEAL_MERCHANT）和商户类型（MCC）条件值 MEAL_MERCHANT分为商户ID和门店ID两级，一个商户ID可对应多个门店ID； MCC分为一级MCC和二级MCC两级，一个一级MCC可对应多个二级MCC； 两者的格式均为： {  \&quot;一级ID1\&quot;: [\&quot;二级ID1\&quot;, \&quot;二级ID2\&quot;]，         \&quot;一级ID2\&quot;: [\&quot;二级ID3\&quot;, \&quot;二级ID4\&quot;]， } 特别：若二级ID不限，可以设置为-1  4）区域（DISTRICT）和地铁卡类型（CARD_TYPE）条件值 格式均为数组： [\&quot;ID1\&quot;, \&quot;ID2\&quot;].</param>
        public ExpenseCtrRuleInfo(string ruleFactor = default(string), string ruleId = default(string), string ruleName = default(string), string ruleOperator = default(string), string ruleValue = default(string))
        {
            this.RuleFactor = ruleFactor;
            this.RuleId = ruleId;
            this.RuleName = ruleName;
            this.RuleOperator = ruleOperator;
            this.RuleValue = ruleValue;
        }

        /// <summary>
        /// 费控维度 枚举值： QUOTA_DAY（日额度）， QUOTA_MONTH（月额度），QUOTA_TOTAL（有效期总额度），QUOTA_ONCE（单次额度）， ALARM_CLOCK_TIME（时间段）， CARD_TYPE（地铁卡类型）， MEAL_MERCHANT（商户）， MCC（商户类型）， DISTRICT（区域）
        /// </summary>
        /// <value>费控维度 枚举值： QUOTA_DAY（日额度）， QUOTA_MONTH（月额度），QUOTA_TOTAL（有效期总额度），QUOTA_ONCE（单次额度）， ALARM_CLOCK_TIME（时间段）， CARD_TYPE（地铁卡类型）， MEAL_MERCHANT（商户）， MCC（商户类型）， DISTRICT（区域）</value>
        [DataMember(Name = "rule_factor", EmitDefaultValue = false)]
        public string RuleFactor { get; set; }

        /// <summary>
        /// 费控条件ID 特殊说明：创建时由支付宝生成，无需外部传入
        /// </summary>
        /// <value>费控条件ID 特殊说明：创建时由支付宝生成，无需外部传入</value>
        [DataMember(Name = "rule_id", EmitDefaultValue = false)]
        public string RuleId { get; set; }

        /// <summary>
        /// 费控条件名称 约束：敏感词校验
        /// </summary>
        /// <value>费控条件名称 约束：敏感词校验</value>
        [DataMember(Name = "rule_name", EmitDefaultValue = false)]
        public string RuleName { get; set; }

        /// <summary>
        /// 费控条件操作符 枚举值： LT(\&quot;&lt;\&quot;,\&quot;小于\&quot;) LE(\&quot;&lt;&#x3D;\&quot;,\&quot;小于等于\&quot;) EQ(\&quot;&#x3D;\&quot;,\&quot;等于\&quot;) NE(\&quot;!&#x3D;\&quot;,\&quot;不等于\&quot;) GE(\&quot;&gt;&#x3D;\&quot;,\&quot;大于等于\&quot;) GT(\&quot;&gt;\&quot;,\&quot;大于\&quot;)
        /// </summary>
        /// <value>费控条件操作符 枚举值： LT(\&quot;&lt;\&quot;,\&quot;小于\&quot;) LE(\&quot;&lt;&#x3D;\&quot;,\&quot;小于等于\&quot;) EQ(\&quot;&#x3D;\&quot;,\&quot;等于\&quot;) NE(\&quot;!&#x3D;\&quot;,\&quot;不等于\&quot;) GE(\&quot;&gt;&#x3D;\&quot;,\&quot;大于等于\&quot;) GT(\&quot;&gt;\&quot;,\&quot;大于\&quot;)</value>
        [DataMember(Name = "rule_operator", EmitDefaultValue = false)]
        public string RuleOperator { get; set; }

        /// <summary>
        /// 费控条件值 约束： 1）金额值以（元）为单位的数值，可以精确到小数点后两位。如费控维度：日额度（QUOTA_DAY）、月额度（QUOTA_MONTH）、有效期总额度（QUOTA_TOTAL）、单次额度（QUOTA_ONCE）对应的条件值；  2）时间段（ALARM_CLOCK_TIME）条件值按如下格式传入： 格式1：星期几格式（custom），节点支持monday/tuesday/wednesday/thursday/friday/saturday/sunday格式如下： {  \&quot;custom\&quot;: {   \&quot;monday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;],    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ],   \&quot;sunday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ]  } } 格式2：工作日/节假日模式（regular），节点支持workday/holiday两种，格式如下： {  \&quot;regular\&quot;: {   \&quot;workday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ],   \&quot;holiday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ]  } } 格式3：不限 {  \&quot;all\&quot;: true } 三种格式仅能选其一；  3）费控维度商户（MEAL_MERCHANT）和商户类型（MCC）条件值 MEAL_MERCHANT分为商户ID和门店ID两级，一个商户ID可对应多个门店ID； MCC分为一级MCC和二级MCC两级，一个一级MCC可对应多个二级MCC； 两者的格式均为： {  \&quot;一级ID1\&quot;: [\&quot;二级ID1\&quot;, \&quot;二级ID2\&quot;]，         \&quot;一级ID2\&quot;: [\&quot;二级ID3\&quot;, \&quot;二级ID4\&quot;]， } 特别：若二级ID不限，可以设置为-1  4）区域（DISTRICT）和地铁卡类型（CARD_TYPE）条件值 格式均为数组： [\&quot;ID1\&quot;, \&quot;ID2\&quot;]
        /// </summary>
        /// <value>费控条件值 约束： 1）金额值以（元）为单位的数值，可以精确到小数点后两位。如费控维度：日额度（QUOTA_DAY）、月额度（QUOTA_MONTH）、有效期总额度（QUOTA_TOTAL）、单次额度（QUOTA_ONCE）对应的条件值；  2）时间段（ALARM_CLOCK_TIME）条件值按如下格式传入： 格式1：星期几格式（custom），节点支持monday/tuesday/wednesday/thursday/friday/saturday/sunday格式如下： {  \&quot;custom\&quot;: {   \&quot;monday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;],    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ],   \&quot;sunday\&quot;: [    [\&quot;12:00\&quot;, \&quot;13:30\&quot;]   ]  } } 格式2：工作日/节假日模式（regular），节点支持workday/holiday两种，格式如下： {  \&quot;regular\&quot;: {   \&quot;workday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ],   \&quot;holiday\&quot;: [    [\&quot;20:59\&quot;, \&quot;22:01\&quot;]   ]  } } 格式3：不限 {  \&quot;all\&quot;: true } 三种格式仅能选其一；  3）费控维度商户（MEAL_MERCHANT）和商户类型（MCC）条件值 MEAL_MERCHANT分为商户ID和门店ID两级，一个商户ID可对应多个门店ID； MCC分为一级MCC和二级MCC两级，一个一级MCC可对应多个二级MCC； 两者的格式均为： {  \&quot;一级ID1\&quot;: [\&quot;二级ID1\&quot;, \&quot;二级ID2\&quot;]，         \&quot;一级ID2\&quot;: [\&quot;二级ID3\&quot;, \&quot;二级ID4\&quot;]， } 特别：若二级ID不限，可以设置为-1  4）区域（DISTRICT）和地铁卡类型（CARD_TYPE）条件值 格式均为数组： [\&quot;ID1\&quot;, \&quot;ID2\&quot;]</value>
        [DataMember(Name = "rule_value", EmitDefaultValue = false)]
        public string RuleValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ExpenseCtrRuleInfo {\n");
            sb.Append("  RuleFactor: ").Append(RuleFactor).Append("\n");
            sb.Append("  RuleId: ").Append(RuleId).Append("\n");
            sb.Append("  RuleName: ").Append(RuleName).Append("\n");
            sb.Append("  RuleOperator: ").Append(RuleOperator).Append("\n");
            sb.Append("  RuleValue: ").Append(RuleValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ExpenseCtrRuleInfo);
        }

        /// <summary>
        /// Returns true if ExpenseCtrRuleInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of ExpenseCtrRuleInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExpenseCtrRuleInfo input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RuleFactor == input.RuleFactor ||
                    (this.RuleFactor != null &&
                    this.RuleFactor.Equals(input.RuleFactor))
                ) && 
                (
                    this.RuleId == input.RuleId ||
                    (this.RuleId != null &&
                    this.RuleId.Equals(input.RuleId))
                ) && 
                (
                    this.RuleName == input.RuleName ||
                    (this.RuleName != null &&
                    this.RuleName.Equals(input.RuleName))
                ) && 
                (
                    this.RuleOperator == input.RuleOperator ||
                    (this.RuleOperator != null &&
                    this.RuleOperator.Equals(input.RuleOperator))
                ) && 
                (
                    this.RuleValue == input.RuleValue ||
                    (this.RuleValue != null &&
                    this.RuleValue.Equals(input.RuleValue))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RuleFactor != null)
                {
                    hashCode = (hashCode * 59) + this.RuleFactor.GetHashCode();
                }
                if (this.RuleId != null)
                {
                    hashCode = (hashCode * 59) + this.RuleId.GetHashCode();
                }
                if (this.RuleName != null)
                {
                    hashCode = (hashCode * 59) + this.RuleName.GetHashCode();
                }
                if (this.RuleOperator != null)
                {
                    hashCode = (hashCode * 59) + this.RuleOperator.GetHashCode();
                }
                if (this.RuleValue != null)
                {
                    hashCode = (hashCode * 59) + this.RuleValue.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
