/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-10-25
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// ConversionData
    /// </summary>
    [DataContract(Name = "ConversionData")]
    public partial class ConversionData : IEquatable<ConversionData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConversionData" /> class.
        /// </summary>
        /// <param name="bizNo">转化流水号，用于幂等  对于source&#x3D;XLIGHT，转化流水号来自灯火的留资明细 对于source&#x3D;DATASET/OTHER，转化流水号由调用方自定义.</param>
        /// <param name="callbackExtInfo">转化回调扩展信息.</param>
        /// <param name="conversionAmount">当source&#x3D;DATASET或者OTHER时使用：  转化金额，单位分.</param>
        /// <param name="conversionId">当source&#x3D;XLIGHT时使用:  转化事件id，来自推广页关联转化事件id.</param>
        /// <param name="conversionTime">转化时间，UTC 时间戳，单位：秒.</param>
        /// <param name="conversionType">当source&#x3D;XLIGHT时使用:  转化事件类型.</param>
        /// <param name="creativeId">创意ID.</param>
        /// <param name="dataId">当source&#x3D;XLIGHT或者DATASET时使用：  数据集id.</param>
        /// <param name="dataSrcType">当source&#x3D;OTHER时使用:  数据类型： KR_MEMBER - 客如云入会 KR_TRADE - 客如云交易 TB_LIVE -  淘宝直播.</param>
        /// <param name="groupId">单元ID.</param>
        /// <param name="joinChannel">XLIGHT - 灯火归因；MERCHANT-商家归因； 默认为XLIGHT.</param>
        /// <param name="planId">计划ID.</param>
        /// <param name="principalId">商户在灯火pb端的id, 可代替principal_tag.</param>
        /// <param name="principalTag">商家标志，可代替principal_id.</param>
        /// <param name="propertyList">当source&#x3D;DATASET或者OTHER时使用：  转化属性列表.</param>
        /// <param name="source">来源： XLIGHT-灯火留资 DATASET-数据集 OTHER-其它.</param>
        /// <param name="targetId">当source&#x3D;OTHER时使用： 主体id，比如品牌id.</param>
        /// <param name="targetType">当source&#x3D;OTHER时使用：  主体类型： BRAND - 品牌 STORE - 店铺 LIVE - 直播 等等.</param>
        /// <param name="uuid">当source&#x3D;DATASET或者OTHER时使用：  转化用户唯一标识.</param>
        /// <param name="uuidType">当source&#x3D;DATASET或者OTHER时使用：  转化客户唯一标志类型： PID - 2088pid.</param>
        public ConversionData(string bizNo = default(string), string callbackExtInfo = default(string), string conversionAmount = default(string), string conversionId = default(string), int conversionTime = default(int), string conversionType = default(string), string creativeId = default(string), string dataId = default(string), string dataSrcType = default(string), string groupId = default(string), string joinChannel = default(string), string planId = default(string), string principalId = default(string), string principalTag = default(string), List<ConversionProperty> propertyList = default(List<ConversionProperty>), string source = default(string), string targetId = default(string), string targetType = default(string), string uuid = default(string), string uuidType = default(string))
        {
            this.BizNo = bizNo;
            this.CallbackExtInfo = callbackExtInfo;
            this.ConversionAmount = conversionAmount;
            this.ConversionId = conversionId;
            this.ConversionTime = conversionTime;
            this.ConversionType = conversionType;
            this.CreativeId = creativeId;
            this.DataId = dataId;
            this.DataSrcType = dataSrcType;
            this.GroupId = groupId;
            this.JoinChannel = joinChannel;
            this.PlanId = planId;
            this.PrincipalId = principalId;
            this.PrincipalTag = principalTag;
            this.PropertyList = propertyList;
            this.Source = source;
            this.TargetId = targetId;
            this.TargetType = targetType;
            this.Uuid = uuid;
            this.UuidType = uuidType;
        }

        /// <summary>
        /// 转化流水号，用于幂等  对于source&#x3D;XLIGHT，转化流水号来自灯火的留资明细 对于source&#x3D;DATASET/OTHER，转化流水号由调用方自定义
        /// </summary>
        /// <value>转化流水号，用于幂等  对于source&#x3D;XLIGHT，转化流水号来自灯火的留资明细 对于source&#x3D;DATASET/OTHER，转化流水号由调用方自定义</value>
        [DataMember(Name = "biz_no", EmitDefaultValue = false)]
        public string BizNo { get; set; }

        /// <summary>
        /// 转化回调扩展信息
        /// </summary>
        /// <value>转化回调扩展信息</value>
        [DataMember(Name = "callback_ext_info", EmitDefaultValue = false)]
        public string CallbackExtInfo { get; set; }

        /// <summary>
        /// 当source&#x3D;DATASET或者OTHER时使用：  转化金额，单位分
        /// </summary>
        /// <value>当source&#x3D;DATASET或者OTHER时使用：  转化金额，单位分</value>
        [DataMember(Name = "conversion_amount", EmitDefaultValue = false)]
        public string ConversionAmount { get; set; }

        /// <summary>
        /// 当source&#x3D;XLIGHT时使用:  转化事件id，来自推广页关联转化事件id
        /// </summary>
        /// <value>当source&#x3D;XLIGHT时使用:  转化事件id，来自推广页关联转化事件id</value>
        [DataMember(Name = "conversion_id", EmitDefaultValue = false)]
        public string ConversionId { get; set; }

        /// <summary>
        /// 转化时间，UTC 时间戳，单位：秒
        /// </summary>
        /// <value>转化时间，UTC 时间戳，单位：秒</value>
        [DataMember(Name = "conversion_time", EmitDefaultValue = false)]
        public int ConversionTime { get; set; }

        /// <summary>
        /// 当source&#x3D;XLIGHT时使用:  转化事件类型
        /// </summary>
        /// <value>当source&#x3D;XLIGHT时使用:  转化事件类型</value>
        [DataMember(Name = "conversion_type", EmitDefaultValue = false)]
        public string ConversionType { get; set; }

        /// <summary>
        /// 创意ID
        /// </summary>
        /// <value>创意ID</value>
        [DataMember(Name = "creative_id", EmitDefaultValue = false)]
        public string CreativeId { get; set; }

        /// <summary>
        /// 当source&#x3D;XLIGHT或者DATASET时使用：  数据集id
        /// </summary>
        /// <value>当source&#x3D;XLIGHT或者DATASET时使用：  数据集id</value>
        [DataMember(Name = "data_id", EmitDefaultValue = false)]
        public string DataId { get; set; }

        /// <summary>
        /// 当source&#x3D;OTHER时使用:  数据类型： KR_MEMBER - 客如云入会 KR_TRADE - 客如云交易 TB_LIVE -  淘宝直播
        /// </summary>
        /// <value>当source&#x3D;OTHER时使用:  数据类型： KR_MEMBER - 客如云入会 KR_TRADE - 客如云交易 TB_LIVE -  淘宝直播</value>
        [DataMember(Name = "data_src_type", EmitDefaultValue = false)]
        public string DataSrcType { get; set; }

        /// <summary>
        /// 单元ID
        /// </summary>
        /// <value>单元ID</value>
        [DataMember(Name = "group_id", EmitDefaultValue = false)]
        public string GroupId { get; set; }

        /// <summary>
        /// XLIGHT - 灯火归因；MERCHANT-商家归因； 默认为XLIGHT
        /// </summary>
        /// <value>XLIGHT - 灯火归因；MERCHANT-商家归因； 默认为XLIGHT</value>
        [DataMember(Name = "join_channel", EmitDefaultValue = false)]
        public string JoinChannel { get; set; }

        /// <summary>
        /// 计划ID
        /// </summary>
        /// <value>计划ID</value>
        [DataMember(Name = "plan_id", EmitDefaultValue = false)]
        public string PlanId { get; set; }

        /// <summary>
        /// 商户在灯火pb端的id, 可代替principal_tag
        /// </summary>
        /// <value>商户在灯火pb端的id, 可代替principal_tag</value>
        [DataMember(Name = "principal_id", EmitDefaultValue = false)]
        public string PrincipalId { get; set; }

        /// <summary>
        /// 商家标志，可代替principal_id
        /// </summary>
        /// <value>商家标志，可代替principal_id</value>
        [DataMember(Name = "principal_tag", EmitDefaultValue = false)]
        public string PrincipalTag { get; set; }

        /// <summary>
        /// 当source&#x3D;DATASET或者OTHER时使用：  转化属性列表
        /// </summary>
        /// <value>当source&#x3D;DATASET或者OTHER时使用：  转化属性列表</value>
        [DataMember(Name = "property_list", EmitDefaultValue = false)]
        public List<ConversionProperty> PropertyList { get; set; }

        /// <summary>
        /// 来源： XLIGHT-灯火留资 DATASET-数据集 OTHER-其它
        /// </summary>
        /// <value>来源： XLIGHT-灯火留资 DATASET-数据集 OTHER-其它</value>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// 当source&#x3D;OTHER时使用： 主体id，比如品牌id
        /// </summary>
        /// <value>当source&#x3D;OTHER时使用： 主体id，比如品牌id</value>
        [DataMember(Name = "target_id", EmitDefaultValue = false)]
        public string TargetId { get; set; }

        /// <summary>
        /// 当source&#x3D;OTHER时使用：  主体类型： BRAND - 品牌 STORE - 店铺 LIVE - 直播 等等
        /// </summary>
        /// <value>当source&#x3D;OTHER时使用：  主体类型： BRAND - 品牌 STORE - 店铺 LIVE - 直播 等等</value>
        [DataMember(Name = "target_type", EmitDefaultValue = false)]
        public string TargetType { get; set; }

        /// <summary>
        /// 当source&#x3D;DATASET或者OTHER时使用：  转化用户唯一标识
        /// </summary>
        /// <value>当source&#x3D;DATASET或者OTHER时使用：  转化用户唯一标识</value>
        [DataMember(Name = "uuid", EmitDefaultValue = false)]
        public string Uuid { get; set; }

        /// <summary>
        /// 当source&#x3D;DATASET或者OTHER时使用：  转化客户唯一标志类型： PID - 2088pid
        /// </summary>
        /// <value>当source&#x3D;DATASET或者OTHER时使用：  转化客户唯一标志类型： PID - 2088pid</value>
        [DataMember(Name = "uuid_type", EmitDefaultValue = false)]
        public string UuidType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ConversionData {\n");
            sb.Append("  BizNo: ").Append(BizNo).Append("\n");
            sb.Append("  CallbackExtInfo: ").Append(CallbackExtInfo).Append("\n");
            sb.Append("  ConversionAmount: ").Append(ConversionAmount).Append("\n");
            sb.Append("  ConversionId: ").Append(ConversionId).Append("\n");
            sb.Append("  ConversionTime: ").Append(ConversionTime).Append("\n");
            sb.Append("  ConversionType: ").Append(ConversionType).Append("\n");
            sb.Append("  CreativeId: ").Append(CreativeId).Append("\n");
            sb.Append("  DataId: ").Append(DataId).Append("\n");
            sb.Append("  DataSrcType: ").Append(DataSrcType).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  JoinChannel: ").Append(JoinChannel).Append("\n");
            sb.Append("  PlanId: ").Append(PlanId).Append("\n");
            sb.Append("  PrincipalId: ").Append(PrincipalId).Append("\n");
            sb.Append("  PrincipalTag: ").Append(PrincipalTag).Append("\n");
            sb.Append("  PropertyList: ").Append(PropertyList).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  TargetId: ").Append(TargetId).Append("\n");
            sb.Append("  TargetType: ").Append(TargetType).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  UuidType: ").Append(UuidType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConversionData);
        }

        /// <summary>
        /// Returns true if ConversionData instances are equal
        /// </summary>
        /// <param name="input">Instance of ConversionData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConversionData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BizNo == input.BizNo ||
                    (this.BizNo != null &&
                    this.BizNo.Equals(input.BizNo))
                ) && 
                (
                    this.CallbackExtInfo == input.CallbackExtInfo ||
                    (this.CallbackExtInfo != null &&
                    this.CallbackExtInfo.Equals(input.CallbackExtInfo))
                ) && 
                (
                    this.ConversionAmount == input.ConversionAmount ||
                    (this.ConversionAmount != null &&
                    this.ConversionAmount.Equals(input.ConversionAmount))
                ) && 
                (
                    this.ConversionId == input.ConversionId ||
                    (this.ConversionId != null &&
                    this.ConversionId.Equals(input.ConversionId))
                ) && 
                (
                    this.ConversionTime == input.ConversionTime ||
                    this.ConversionTime.Equals(input.ConversionTime)
                ) && 
                (
                    this.ConversionType == input.ConversionType ||
                    (this.ConversionType != null &&
                    this.ConversionType.Equals(input.ConversionType))
                ) && 
                (
                    this.CreativeId == input.CreativeId ||
                    (this.CreativeId != null &&
                    this.CreativeId.Equals(input.CreativeId))
                ) && 
                (
                    this.DataId == input.DataId ||
                    (this.DataId != null &&
                    this.DataId.Equals(input.DataId))
                ) && 
                (
                    this.DataSrcType == input.DataSrcType ||
                    (this.DataSrcType != null &&
                    this.DataSrcType.Equals(input.DataSrcType))
                ) && 
                (
                    this.GroupId == input.GroupId ||
                    (this.GroupId != null &&
                    this.GroupId.Equals(input.GroupId))
                ) && 
                (
                    this.JoinChannel == input.JoinChannel ||
                    (this.JoinChannel != null &&
                    this.JoinChannel.Equals(input.JoinChannel))
                ) && 
                (
                    this.PlanId == input.PlanId ||
                    (this.PlanId != null &&
                    this.PlanId.Equals(input.PlanId))
                ) && 
                (
                    this.PrincipalId == input.PrincipalId ||
                    (this.PrincipalId != null &&
                    this.PrincipalId.Equals(input.PrincipalId))
                ) && 
                (
                    this.PrincipalTag == input.PrincipalTag ||
                    (this.PrincipalTag != null &&
                    this.PrincipalTag.Equals(input.PrincipalTag))
                ) && 
                (
                    this.PropertyList == input.PropertyList ||
                    this.PropertyList != null &&
                    input.PropertyList != null &&
                    this.PropertyList.SequenceEqual(input.PropertyList)
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                ) && 
                (
                    this.TargetId == input.TargetId ||
                    (this.TargetId != null &&
                    this.TargetId.Equals(input.TargetId))
                ) && 
                (
                    this.TargetType == input.TargetType ||
                    (this.TargetType != null &&
                    this.TargetType.Equals(input.TargetType))
                ) && 
                (
                    this.Uuid == input.Uuid ||
                    (this.Uuid != null &&
                    this.Uuid.Equals(input.Uuid))
                ) && 
                (
                    this.UuidType == input.UuidType ||
                    (this.UuidType != null &&
                    this.UuidType.Equals(input.UuidType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BizNo != null)
                {
                    hashCode = (hashCode * 59) + this.BizNo.GetHashCode();
                }
                if (this.CallbackExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.CallbackExtInfo.GetHashCode();
                }
                if (this.ConversionAmount != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionAmount.GetHashCode();
                }
                if (this.ConversionId != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ConversionTime.GetHashCode();
                if (this.ConversionType != null)
                {
                    hashCode = (hashCode * 59) + this.ConversionType.GetHashCode();
                }
                if (this.CreativeId != null)
                {
                    hashCode = (hashCode * 59) + this.CreativeId.GetHashCode();
                }
                if (this.DataId != null)
                {
                    hashCode = (hashCode * 59) + this.DataId.GetHashCode();
                }
                if (this.DataSrcType != null)
                {
                    hashCode = (hashCode * 59) + this.DataSrcType.GetHashCode();
                }
                if (this.GroupId != null)
                {
                    hashCode = (hashCode * 59) + this.GroupId.GetHashCode();
                }
                if (this.JoinChannel != null)
                {
                    hashCode = (hashCode * 59) + this.JoinChannel.GetHashCode();
                }
                if (this.PlanId != null)
                {
                    hashCode = (hashCode * 59) + this.PlanId.GetHashCode();
                }
                if (this.PrincipalId != null)
                {
                    hashCode = (hashCode * 59) + this.PrincipalId.GetHashCode();
                }
                if (this.PrincipalTag != null)
                {
                    hashCode = (hashCode * 59) + this.PrincipalTag.GetHashCode();
                }
                if (this.PropertyList != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyList.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                if (this.TargetId != null)
                {
                    hashCode = (hashCode * 59) + this.TargetId.GetHashCode();
                }
                if (this.TargetType != null)
                {
                    hashCode = (hashCode * 59) + this.TargetType.GetHashCode();
                }
                if (this.Uuid != null)
                {
                    hashCode = (hashCode * 59) + this.Uuid.GetHashCode();
                }
                if (this.UuidType != null)
                {
                    hashCode = (hashCode * 59) + this.UuidType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
