/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-10-25
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// UseRule
    /// </summary>
    [DataContract(Name = "UseRule")]
    public partial class UseRule : IEquatable<UseRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UseRule" /> class.
        /// </summary>
        /// <param name="extInfo">扩展属性，无需设置.</param>
        /// <param name="forbiddenTime">forbiddenTime.</param>
        /// <param name="limitRule">优惠券的使用支付渠道限制规  则，  不受支付渠道限制  :USE_NO_LIMIT;  仅限口碑储值卡支付时可用  :USE_ON_CURRENT_PAY_C  HANNEL;  口碑储值卡支付时不可用  :NOT_ALLOWED_USE;  【备注】支付渠道限制不允许修改.</param>
        /// <param name="minConsume">券核销的最低消费门槛，单位元.</param>
        /// <param name="payRedirectUrl">券买单跳转链接.</param>
        /// <param name="suitShops">券适用门店列表  仅品牌商发起的招商活动可为空  直发奖类型活动必须与活动适用门店一致  最多支持10w家门店.</param>
        /// <param name="useTime">券可用时间段.</param>
        public UseRule(string extInfo = default(string), ForbbidenTime forbiddenTime = default(ForbbidenTime), string limitRule = default(string), string minConsume = default(string), string payRedirectUrl = default(string), List<string> suitShops = default(List<string>), List<UseTime> useTime = default(List<UseTime>))
        {
            this.ExtInfo = extInfo;
            this.ForbiddenTime = forbiddenTime;
            this.LimitRule = limitRule;
            this.MinConsume = minConsume;
            this.PayRedirectUrl = payRedirectUrl;
            this.SuitShops = suitShops;
            this.UseTime = useTime;
        }

        /// <summary>
        /// 扩展属性，无需设置
        /// </summary>
        /// <value>扩展属性，无需设置</value>
        [DataMember(Name = "ext_info", EmitDefaultValue = false)]
        public string ExtInfo { get; set; }

        /// <summary>
        /// Gets or Sets ForbiddenTime
        /// </summary>
        [DataMember(Name = "forbidden_time", EmitDefaultValue = false)]
        public ForbbidenTime ForbiddenTime { get; set; }

        /// <summary>
        /// 优惠券的使用支付渠道限制规  则，  不受支付渠道限制  :USE_NO_LIMIT;  仅限口碑储值卡支付时可用  :USE_ON_CURRENT_PAY_C  HANNEL;  口碑储值卡支付时不可用  :NOT_ALLOWED_USE;  【备注】支付渠道限制不允许修改
        /// </summary>
        /// <value>优惠券的使用支付渠道限制规  则，  不受支付渠道限制  :USE_NO_LIMIT;  仅限口碑储值卡支付时可用  :USE_ON_CURRENT_PAY_C  HANNEL;  口碑储值卡支付时不可用  :NOT_ALLOWED_USE;  【备注】支付渠道限制不允许修改</value>
        [DataMember(Name = "limit_rule", EmitDefaultValue = false)]
        public string LimitRule { get; set; }

        /// <summary>
        /// 券核销的最低消费门槛，单位元
        /// </summary>
        /// <value>券核销的最低消费门槛，单位元</value>
        [DataMember(Name = "min_consume", EmitDefaultValue = false)]
        public string MinConsume { get; set; }

        /// <summary>
        /// 券买单跳转链接
        /// </summary>
        /// <value>券买单跳转链接</value>
        [DataMember(Name = "pay_redirect_url", EmitDefaultValue = false)]
        public string PayRedirectUrl { get; set; }

        /// <summary>
        /// 券适用门店列表  仅品牌商发起的招商活动可为空  直发奖类型活动必须与活动适用门店一致  最多支持10w家门店
        /// </summary>
        /// <value>券适用门店列表  仅品牌商发起的招商活动可为空  直发奖类型活动必须与活动适用门店一致  最多支持10w家门店</value>
        [DataMember(Name = "suit_shops", EmitDefaultValue = false)]
        public List<string> SuitShops { get; set; }

        /// <summary>
        /// 券可用时间段
        /// </summary>
        /// <value>券可用时间段</value>
        [DataMember(Name = "use_time", EmitDefaultValue = false)]
        public List<UseTime> UseTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UseRule {\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  ForbiddenTime: ").Append(ForbiddenTime).Append("\n");
            sb.Append("  LimitRule: ").Append(LimitRule).Append("\n");
            sb.Append("  MinConsume: ").Append(MinConsume).Append("\n");
            sb.Append("  PayRedirectUrl: ").Append(PayRedirectUrl).Append("\n");
            sb.Append("  SuitShops: ").Append(SuitShops).Append("\n");
            sb.Append("  UseTime: ").Append(UseTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UseRule);
        }

        /// <summary>
        /// Returns true if UseRule instances are equal
        /// </summary>
        /// <param name="input">Instance of UseRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UseRule input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ExtInfo == input.ExtInfo ||
                    (this.ExtInfo != null &&
                    this.ExtInfo.Equals(input.ExtInfo))
                ) && 
                (
                    this.ForbiddenTime == input.ForbiddenTime ||
                    (this.ForbiddenTime != null &&
                    this.ForbiddenTime.Equals(input.ForbiddenTime))
                ) && 
                (
                    this.LimitRule == input.LimitRule ||
                    (this.LimitRule != null &&
                    this.LimitRule.Equals(input.LimitRule))
                ) && 
                (
                    this.MinConsume == input.MinConsume ||
                    (this.MinConsume != null &&
                    this.MinConsume.Equals(input.MinConsume))
                ) && 
                (
                    this.PayRedirectUrl == input.PayRedirectUrl ||
                    (this.PayRedirectUrl != null &&
                    this.PayRedirectUrl.Equals(input.PayRedirectUrl))
                ) && 
                (
                    this.SuitShops == input.SuitShops ||
                    this.SuitShops != null &&
                    input.SuitShops != null &&
                    this.SuitShops.SequenceEqual(input.SuitShops)
                ) && 
                (
                    this.UseTime == input.UseTime ||
                    this.UseTime != null &&
                    input.UseTime != null &&
                    this.UseTime.SequenceEqual(input.UseTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfo.GetHashCode();
                }
                if (this.ForbiddenTime != null)
                {
                    hashCode = (hashCode * 59) + this.ForbiddenTime.GetHashCode();
                }
                if (this.LimitRule != null)
                {
                    hashCode = (hashCode * 59) + this.LimitRule.GetHashCode();
                }
                if (this.MinConsume != null)
                {
                    hashCode = (hashCode * 59) + this.MinConsume.GetHashCode();
                }
                if (this.PayRedirectUrl != null)
                {
                    hashCode = (hashCode * 59) + this.PayRedirectUrl.GetHashCode();
                }
                if (this.SuitShops != null)
                {
                    hashCode = (hashCode * 59) + this.SuitShops.GetHashCode();
                }
                if (this.UseTime != null)
                {
                    hashCode = (hashCode * 59) + this.UseTime.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
