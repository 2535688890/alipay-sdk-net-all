/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-06-06
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// InteligentDataCondition
    /// </summary>
    [DataContract(Name = "InteligentDataCondition")]
    public partial class InteligentDataCondition : IEquatable<InteligentDataCondition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InteligentDataCondition" /> class.
        /// </summary>
        /// <param name="dataType">数据类型，支持枚举：文本：STRING；数值：NUMBER；长整型：LONG；浮点型：DOUBLE；日期：DATE；布尔：BOOLEAN；金额：MONEY.</param>
        /// <param name="limitType">数据限制类型，支持枚举：固定值：FIX；单选值：SELECT；区间值：RANGE;.</param>
        /// <param name="value">数据格式值；如：范围值:(1,10)，固定值:1.</param>
        public InteligentDataCondition(string dataType = default(string), string limitType = default(string), string value = default(string))
        {
            this.DataType = dataType;
            this.LimitType = limitType;
            this.Value = value;
        }

        /// <summary>
        /// 数据类型，支持枚举：文本：STRING；数值：NUMBER；长整型：LONG；浮点型：DOUBLE；日期：DATE；布尔：BOOLEAN；金额：MONEY
        /// </summary>
        /// <value>数据类型，支持枚举：文本：STRING；数值：NUMBER；长整型：LONG；浮点型：DOUBLE；日期：DATE；布尔：BOOLEAN；金额：MONEY</value>
        [DataMember(Name = "data_type", EmitDefaultValue = false)]
        public string DataType { get; set; }

        /// <summary>
        /// 数据限制类型，支持枚举：固定值：FIX；单选值：SELECT；区间值：RANGE;
        /// </summary>
        /// <value>数据限制类型，支持枚举：固定值：FIX；单选值：SELECT；区间值：RANGE;</value>
        [DataMember(Name = "limit_type", EmitDefaultValue = false)]
        public string LimitType { get; set; }

        /// <summary>
        /// 数据格式值；如：范围值:(1,10)，固定值:1
        /// </summary>
        /// <value>数据格式值；如：范围值:(1,10)，固定值:1</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InteligentDataCondition {\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  LimitType: ").Append(LimitType).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InteligentDataCondition);
        }

        /// <summary>
        /// Returns true if InteligentDataCondition instances are equal
        /// </summary>
        /// <param name="input">Instance of InteligentDataCondition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InteligentDataCondition input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && 
                (
                    this.LimitType == input.LimitType ||
                    (this.LimitType != null &&
                    this.LimitType.Equals(input.LimitType))
                ) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DataType != null)
                {
                    hashCode = (hashCode * 59) + this.DataType.GetHashCode();
                }
                if (this.LimitType != null)
                {
                    hashCode = (hashCode * 59) + this.LimitType.GetHashCode();
                }
                if (this.Value != null)
                {
                    hashCode = (hashCode * 59) + this.Value.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
