/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-10-25
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayOpenAppMiniTemplatemessageSendModel
    /// </summary>
    [DataContract(Name = "AlipayOpenAppMiniTemplatemessageSendModel")]
    public partial class AlipayOpenAppMiniTemplatemessageSendModel : IEquatable<AlipayOpenAppMiniTemplatemessageSendModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayOpenAppMiniTemplatemessageSendModel" /> class.
        /// </summary>
        /// <param name="data">模板消息内容。商家/开发者将模板占位符替换为自定义内容。  注意： * 选用模板时配置的关键字顺序与keyword_ X相互对应，填写时需注意。  * 自定义消息内容仅需替换 value 后内容即可，其余内容请勿修改。如 {\&quot;keyword1\&quot;: {\&quot;value\&quot; : \&quot;2021年01月\&quot;}。表示第一个关键字数据为\&quot;2021年01月\&quot; 。  * value 最长为 50 个字符。.</param>
        /// <param name="formId">*支付消息模板：需传入用户发生的交易行为的支付宝交易号 trade_no； *表单提交模板：需传入用户在小程序触发表单提交事件获得的表单号； *刷脸消息模板：需传入在IOT刷脸后得到的ftoken等，用于信息发送的校验。 说明：订阅消息模板无需传入本参数。.</param>
        /// <param name="page">小程序的跳转页面。用于用户点击模板消息 进入小程序查看 按钮后，跳转至商家小程序对应页面。.</param>
        /// <param name="toOpenId">支付宝openId，用于支付宝用户在当前应用下的用户标识。.</param>
        /// <param name="toUserId">接收模板消息的用户 user_id，一般为2088开头的16为数字。 注意：需为实际支付/提交表单/刷脸/订阅消息的用户。.</param>
        /// <param name="userTemplateId">商家在商家自运营中心选用的消息模板ID，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/01rnqx#%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF\&quot;&gt;选用消息模板&lt;/a&gt; 。.</param>
        public AlipayOpenAppMiniTemplatemessageSendModel(string data = default(string), string formId = default(string), string page = default(string), string toOpenId = default(string), string toUserId = default(string), string userTemplateId = default(string))
        {
            this.Data = data;
            this.FormId = formId;
            this.Page = page;
            this.ToOpenId = toOpenId;
            this.ToUserId = toUserId;
            this.UserTemplateId = userTemplateId;
        }

        /// <summary>
        /// 模板消息内容。商家/开发者将模板占位符替换为自定义内容。  注意： * 选用模板时配置的关键字顺序与keyword_ X相互对应，填写时需注意。  * 自定义消息内容仅需替换 value 后内容即可，其余内容请勿修改。如 {\&quot;keyword1\&quot;: {\&quot;value\&quot; : \&quot;2021年01月\&quot;}。表示第一个关键字数据为\&quot;2021年01月\&quot; 。  * value 最长为 50 个字符。
        /// </summary>
        /// <value>模板消息内容。商家/开发者将模板占位符替换为自定义内容。  注意： * 选用模板时配置的关键字顺序与keyword_ X相互对应，填写时需注意。  * 自定义消息内容仅需替换 value 后内容即可，其余内容请勿修改。如 {\&quot;keyword1\&quot;: {\&quot;value\&quot; : \&quot;2021年01月\&quot;}。表示第一个关键字数据为\&quot;2021年01月\&quot; 。  * value 最长为 50 个字符。</value>
        [DataMember(Name = "data", EmitDefaultValue = false)]
        public string Data { get; set; }

        /// <summary>
        /// *支付消息模板：需传入用户发生的交易行为的支付宝交易号 trade_no； *表单提交模板：需传入用户在小程序触发表单提交事件获得的表单号； *刷脸消息模板：需传入在IOT刷脸后得到的ftoken等，用于信息发送的校验。 说明：订阅消息模板无需传入本参数。
        /// </summary>
        /// <value>*支付消息模板：需传入用户发生的交易行为的支付宝交易号 trade_no； *表单提交模板：需传入用户在小程序触发表单提交事件获得的表单号； *刷脸消息模板：需传入在IOT刷脸后得到的ftoken等，用于信息发送的校验。 说明：订阅消息模板无需传入本参数。</value>
        [DataMember(Name = "form_id", EmitDefaultValue = false)]
        public string FormId { get; set; }

        /// <summary>
        /// 小程序的跳转页面。用于用户点击模板消息 进入小程序查看 按钮后，跳转至商家小程序对应页面。
        /// </summary>
        /// <value>小程序的跳转页面。用于用户点击模板消息 进入小程序查看 按钮后，跳转至商家小程序对应页面。</value>
        [DataMember(Name = "page", EmitDefaultValue = false)]
        public string Page { get; set; }

        /// <summary>
        /// 支付宝openId，用于支付宝用户在当前应用下的用户标识。
        /// </summary>
        /// <value>支付宝openId，用于支付宝用户在当前应用下的用户标识。</value>
        [DataMember(Name = "to_open_id", EmitDefaultValue = false)]
        public string ToOpenId { get; set; }

        /// <summary>
        /// 接收模板消息的用户 user_id，一般为2088开头的16为数字。 注意：需为实际支付/提交表单/刷脸/订阅消息的用户。
        /// </summary>
        /// <value>接收模板消息的用户 user_id，一般为2088开头的16为数字。 注意：需为实际支付/提交表单/刷脸/订阅消息的用户。</value>
        [DataMember(Name = "to_user_id", EmitDefaultValue = false)]
        public string ToUserId { get; set; }

        /// <summary>
        /// 商家在商家自运营中心选用的消息模板ID，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/01rnqx#%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF\&quot;&gt;选用消息模板&lt;/a&gt; 。
        /// </summary>
        /// <value>商家在商家自运营中心选用的消息模板ID，详情参见 &lt;a href&#x3D;\&quot;https://opendocs.alipay.com/mini/01rnqx#%E8%AE%A2%E9%98%85%E6%B6%88%E6%81%AF\&quot;&gt;选用消息模板&lt;/a&gt; 。</value>
        [DataMember(Name = "user_template_id", EmitDefaultValue = false)]
        public string UserTemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayOpenAppMiniTemplatemessageSendModel {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  FormId: ").Append(FormId).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  ToOpenId: ").Append(ToOpenId).Append("\n");
            sb.Append("  ToUserId: ").Append(ToUserId).Append("\n");
            sb.Append("  UserTemplateId: ").Append(UserTemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayOpenAppMiniTemplatemessageSendModel);
        }

        /// <summary>
        /// Returns true if AlipayOpenAppMiniTemplatemessageSendModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayOpenAppMiniTemplatemessageSendModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayOpenAppMiniTemplatemessageSendModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Data == input.Data ||
                    (this.Data != null &&
                    this.Data.Equals(input.Data))
                ) && 
                (
                    this.FormId == input.FormId ||
                    (this.FormId != null &&
                    this.FormId.Equals(input.FormId))
                ) && 
                (
                    this.Page == input.Page ||
                    (this.Page != null &&
                    this.Page.Equals(input.Page))
                ) && 
                (
                    this.ToOpenId == input.ToOpenId ||
                    (this.ToOpenId != null &&
                    this.ToOpenId.Equals(input.ToOpenId))
                ) && 
                (
                    this.ToUserId == input.ToUserId ||
                    (this.ToUserId != null &&
                    this.ToUserId.Equals(input.ToUserId))
                ) && 
                (
                    this.UserTemplateId == input.UserTemplateId ||
                    (this.UserTemplateId != null &&
                    this.UserTemplateId.Equals(input.UserTemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                {
                    hashCode = (hashCode * 59) + this.Data.GetHashCode();
                }
                if (this.FormId != null)
                {
                    hashCode = (hashCode * 59) + this.FormId.GetHashCode();
                }
                if (this.Page != null)
                {
                    hashCode = (hashCode * 59) + this.Page.GetHashCode();
                }
                if (this.ToOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.ToOpenId.GetHashCode();
                }
                if (this.ToUserId != null)
                {
                    hashCode = (hashCode * 59) + this.ToUserId.GetHashCode();
                }
                if (this.UserTemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.UserTemplateId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
