/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-10-25
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// DiscountDetail
    /// </summary>
    [DataContract(Name = "DiscountDetail")]
    public partial class DiscountDetail : IEquatable<DiscountDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DiscountDetail" /> class.
        /// </summary>
        /// <param name="discountAmount">优惠金额.</param>
        /// <param name="discountDesc">优惠描述，比如至多优惠XX元，满XX减XX.</param>
        /// <param name="discountType">优惠类型,商家优惠（M_DISCOUNT），平台优惠（RT_DISCOUNT）.</param>
        /// <param name="id">优惠ID或活动ID.</param>
        /// <param name="isHit">优惠是否命中, true代表命中了优惠；false代表未命中优惠.</param>
        /// <param name="isPurchased">是否是购买券, true代表是购买的券，false调表不是购买的券.</param>
        /// <param name="name">优惠名称.</param>
        public DiscountDetail(string discountAmount = default(string), List<string> discountDesc = default(List<string>), string discountType = default(string), string id = default(string), string isHit = default(string), string isPurchased = default(string), string name = default(string))
        {
            this.DiscountAmount = discountAmount;
            this.DiscountDesc = discountDesc;
            this.DiscountType = discountType;
            this.Id = id;
            this.IsHit = isHit;
            this.IsPurchased = isPurchased;
            this.Name = name;
        }

        /// <summary>
        /// 优惠金额
        /// </summary>
        /// <value>优惠金额</value>
        [DataMember(Name = "discount_amount", EmitDefaultValue = false)]
        public string DiscountAmount { get; set; }

        /// <summary>
        /// 优惠描述，比如至多优惠XX元，满XX减XX
        /// </summary>
        /// <value>优惠描述，比如至多优惠XX元，满XX减XX</value>
        [DataMember(Name = "discount_desc", EmitDefaultValue = false)]
        public List<string> DiscountDesc { get; set; }

        /// <summary>
        /// 优惠类型,商家优惠（M_DISCOUNT），平台优惠（RT_DISCOUNT）
        /// </summary>
        /// <value>优惠类型,商家优惠（M_DISCOUNT），平台优惠（RT_DISCOUNT）</value>
        [DataMember(Name = "discount_type", EmitDefaultValue = false)]
        public string DiscountType { get; set; }

        /// <summary>
        /// 优惠ID或活动ID
        /// </summary>
        /// <value>优惠ID或活动ID</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// 优惠是否命中, true代表命中了优惠；false代表未命中优惠
        /// </summary>
        /// <value>优惠是否命中, true代表命中了优惠；false代表未命中优惠</value>
        [DataMember(Name = "is_hit", EmitDefaultValue = false)]
        public string IsHit { get; set; }

        /// <summary>
        /// 是否是购买券, true代表是购买的券，false调表不是购买的券
        /// </summary>
        /// <value>是否是购买券, true代表是购买的券，false调表不是购买的券</value>
        [DataMember(Name = "is_purchased", EmitDefaultValue = false)]
        public string IsPurchased { get; set; }

        /// <summary>
        /// 优惠名称
        /// </summary>
        /// <value>优惠名称</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DiscountDetail {\n");
            sb.Append("  DiscountAmount: ").Append(DiscountAmount).Append("\n");
            sb.Append("  DiscountDesc: ").Append(DiscountDesc).Append("\n");
            sb.Append("  DiscountType: ").Append(DiscountType).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHit: ").Append(IsHit).Append("\n");
            sb.Append("  IsPurchased: ").Append(IsPurchased).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DiscountDetail);
        }

        /// <summary>
        /// Returns true if DiscountDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of DiscountDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DiscountDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.DiscountAmount == input.DiscountAmount ||
                    (this.DiscountAmount != null &&
                    this.DiscountAmount.Equals(input.DiscountAmount))
                ) && 
                (
                    this.DiscountDesc == input.DiscountDesc ||
                    this.DiscountDesc != null &&
                    input.DiscountDesc != null &&
                    this.DiscountDesc.SequenceEqual(input.DiscountDesc)
                ) && 
                (
                    this.DiscountType == input.DiscountType ||
                    (this.DiscountType != null &&
                    this.DiscountType.Equals(input.DiscountType))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsHit == input.IsHit ||
                    (this.IsHit != null &&
                    this.IsHit.Equals(input.IsHit))
                ) && 
                (
                    this.IsPurchased == input.IsPurchased ||
                    (this.IsPurchased != null &&
                    this.IsPurchased.Equals(input.IsPurchased))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DiscountAmount != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountAmount.GetHashCode();
                }
                if (this.DiscountDesc != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountDesc.GetHashCode();
                }
                if (this.DiscountType != null)
                {
                    hashCode = (hashCode * 59) + this.DiscountType.GetHashCode();
                }
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.IsHit != null)
                {
                    hashCode = (hashCode * 59) + this.IsHit.GetHashCode();
                }
                if (this.IsPurchased != null)
                {
                    hashCode = (hashCode * 59) + this.IsPurchased.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
