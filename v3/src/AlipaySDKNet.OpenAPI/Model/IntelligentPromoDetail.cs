/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-10-26
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// IntelligentPromoDetail
    /// </summary>
    [DataContract(Name = "IntelligentPromoDetail")]
    public partial class IntelligentPromoDetail : IEquatable<IntelligentPromoDetail>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IntelligentPromoDetail" /> class.
        /// </summary>
        /// <param name="budget">budget.</param>
        /// <param name="campId">营销活动的id，也就是消费送的活动id.</param>
        /// <param name="constraint">constraint.</param>
        /// <param name="crowdConstraint">crowdConstraint.</param>
        /// <param name="desc">智能营销活动的子活动.</param>
        /// <param name="extInfo">活动扩展信息.</param>
        /// <param name="forecastEffect">forecastEffect.</param>
        /// <param name="merchantPromoType">自运营活动类型。DIRECT_SEND：直发奖；CONSUME_SEND：消费送.</param>
        /// <param name="name">子营销活动名称.</param>
        /// <param name="promoTools">营销工具集合。主要是活动涉及到的奖品信息.</param>
        /// <param name="publishChannels">投放渠道信息.</param>
        /// <param name="templateId">子营销活动对应的模板id.</param>
        public IntelligentPromoDetail(BudgetInfo budget = default(BudgetInfo), string campId = default(string), ConstraintInfo constraint = default(ConstraintInfo), CrowdConstraintInfo crowdConstraint = default(CrowdConstraintInfo), string desc = default(string), string extInfo = default(string), IntelligentPromoEffect forecastEffect = default(IntelligentPromoEffect), string merchantPromoType = default(string), string name = default(string), List<PromoTool> promoTools = default(List<PromoTool>), List<PublishChannel> publishChannels = default(List<PublishChannel>), string templateId = default(string))
        {
            this.Budget = budget;
            this.CampId = campId;
            this.Constraint = constraint;
            this.CrowdConstraint = crowdConstraint;
            this.Desc = desc;
            this.ExtInfo = extInfo;
            this.ForecastEffect = forecastEffect;
            this.MerchantPromoType = merchantPromoType;
            this.Name = name;
            this.PromoTools = promoTools;
            this.PublishChannels = publishChannels;
            this.TemplateId = templateId;
        }

        /// <summary>
        /// Gets or Sets Budget
        /// </summary>
        [DataMember(Name = "budget", EmitDefaultValue = false)]
        public BudgetInfo Budget { get; set; }

        /// <summary>
        /// 营销活动的id，也就是消费送的活动id
        /// </summary>
        /// <value>营销活动的id，也就是消费送的活动id</value>
        [DataMember(Name = "camp_id", EmitDefaultValue = false)]
        public string CampId { get; set; }

        /// <summary>
        /// Gets or Sets Constraint
        /// </summary>
        [DataMember(Name = "constraint", EmitDefaultValue = false)]
        public ConstraintInfo Constraint { get; set; }

        /// <summary>
        /// Gets or Sets CrowdConstraint
        /// </summary>
        [DataMember(Name = "crowd_constraint", EmitDefaultValue = false)]
        public CrowdConstraintInfo CrowdConstraint { get; set; }

        /// <summary>
        /// 智能营销活动的子活动
        /// </summary>
        /// <value>智能营销活动的子活动</value>
        [DataMember(Name = "desc", EmitDefaultValue = false)]
        public string Desc { get; set; }

        /// <summary>
        /// 活动扩展信息
        /// </summary>
        /// <value>活动扩展信息</value>
        [DataMember(Name = "ext_info", EmitDefaultValue = false)]
        public string ExtInfo { get; set; }

        /// <summary>
        /// Gets or Sets ForecastEffect
        /// </summary>
        [DataMember(Name = "forecast_effect", EmitDefaultValue = false)]
        public IntelligentPromoEffect ForecastEffect { get; set; }

        /// <summary>
        /// 自运营活动类型。DIRECT_SEND：直发奖；CONSUME_SEND：消费送
        /// </summary>
        /// <value>自运营活动类型。DIRECT_SEND：直发奖；CONSUME_SEND：消费送</value>
        [DataMember(Name = "merchant_promo_type", EmitDefaultValue = false)]
        public string MerchantPromoType { get; set; }

        /// <summary>
        /// 子营销活动名称
        /// </summary>
        /// <value>子营销活动名称</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// 营销工具集合。主要是活动涉及到的奖品信息
        /// </summary>
        /// <value>营销工具集合。主要是活动涉及到的奖品信息</value>
        [DataMember(Name = "promo_tools", EmitDefaultValue = false)]
        public List<PromoTool> PromoTools { get; set; }

        /// <summary>
        /// 投放渠道信息
        /// </summary>
        /// <value>投放渠道信息</value>
        [DataMember(Name = "publish_channels", EmitDefaultValue = false)]
        public List<PublishChannel> PublishChannels { get; set; }

        /// <summary>
        /// 子营销活动对应的模板id
        /// </summary>
        /// <value>子营销活动对应的模板id</value>
        [DataMember(Name = "template_id", EmitDefaultValue = false)]
        public string TemplateId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IntelligentPromoDetail {\n");
            sb.Append("  Budget: ").Append(Budget).Append("\n");
            sb.Append("  CampId: ").Append(CampId).Append("\n");
            sb.Append("  Constraint: ").Append(Constraint).Append("\n");
            sb.Append("  CrowdConstraint: ").Append(CrowdConstraint).Append("\n");
            sb.Append("  Desc: ").Append(Desc).Append("\n");
            sb.Append("  ExtInfo: ").Append(ExtInfo).Append("\n");
            sb.Append("  ForecastEffect: ").Append(ForecastEffect).Append("\n");
            sb.Append("  MerchantPromoType: ").Append(MerchantPromoType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PromoTools: ").Append(PromoTools).Append("\n");
            sb.Append("  PublishChannels: ").Append(PublishChannels).Append("\n");
            sb.Append("  TemplateId: ").Append(TemplateId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IntelligentPromoDetail);
        }

        /// <summary>
        /// Returns true if IntelligentPromoDetail instances are equal
        /// </summary>
        /// <param name="input">Instance of IntelligentPromoDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IntelligentPromoDetail input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Budget == input.Budget ||
                    (this.Budget != null &&
                    this.Budget.Equals(input.Budget))
                ) && 
                (
                    this.CampId == input.CampId ||
                    (this.CampId != null &&
                    this.CampId.Equals(input.CampId))
                ) && 
                (
                    this.Constraint == input.Constraint ||
                    (this.Constraint != null &&
                    this.Constraint.Equals(input.Constraint))
                ) && 
                (
                    this.CrowdConstraint == input.CrowdConstraint ||
                    (this.CrowdConstraint != null &&
                    this.CrowdConstraint.Equals(input.CrowdConstraint))
                ) && 
                (
                    this.Desc == input.Desc ||
                    (this.Desc != null &&
                    this.Desc.Equals(input.Desc))
                ) && 
                (
                    this.ExtInfo == input.ExtInfo ||
                    (this.ExtInfo != null &&
                    this.ExtInfo.Equals(input.ExtInfo))
                ) && 
                (
                    this.ForecastEffect == input.ForecastEffect ||
                    (this.ForecastEffect != null &&
                    this.ForecastEffect.Equals(input.ForecastEffect))
                ) && 
                (
                    this.MerchantPromoType == input.MerchantPromoType ||
                    (this.MerchantPromoType != null &&
                    this.MerchantPromoType.Equals(input.MerchantPromoType))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.PromoTools == input.PromoTools ||
                    this.PromoTools != null &&
                    input.PromoTools != null &&
                    this.PromoTools.SequenceEqual(input.PromoTools)
                ) && 
                (
                    this.PublishChannels == input.PublishChannels ||
                    this.PublishChannels != null &&
                    input.PublishChannels != null &&
                    this.PublishChannels.SequenceEqual(input.PublishChannels)
                ) && 
                (
                    this.TemplateId == input.TemplateId ||
                    (this.TemplateId != null &&
                    this.TemplateId.Equals(input.TemplateId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Budget != null)
                {
                    hashCode = (hashCode * 59) + this.Budget.GetHashCode();
                }
                if (this.CampId != null)
                {
                    hashCode = (hashCode * 59) + this.CampId.GetHashCode();
                }
                if (this.Constraint != null)
                {
                    hashCode = (hashCode * 59) + this.Constraint.GetHashCode();
                }
                if (this.CrowdConstraint != null)
                {
                    hashCode = (hashCode * 59) + this.CrowdConstraint.GetHashCode();
                }
                if (this.Desc != null)
                {
                    hashCode = (hashCode * 59) + this.Desc.GetHashCode();
                }
                if (this.ExtInfo != null)
                {
                    hashCode = (hashCode * 59) + this.ExtInfo.GetHashCode();
                }
                if (this.ForecastEffect != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastEffect.GetHashCode();
                }
                if (this.MerchantPromoType != null)
                {
                    hashCode = (hashCode * 59) + this.MerchantPromoType.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.PromoTools != null)
                {
                    hashCode = (hashCode * 59) + this.PromoTools.GetHashCode();
                }
                if (this.PublishChannels != null)
                {
                    hashCode = (hashCode * 59) + this.PublishChannels.GetHashCode();
                }
                if (this.TemplateId != null)
                {
                    hashCode = (hashCode * 59) + this.TemplateId.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
