/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-06-06
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AnttechOceanbaseTestplatformTaskQueryResponseModel
    /// </summary>
    [DataContract(Name = "AnttechOceanbaseTestplatformTaskQueryResponseModel")]
    public partial class AnttechOceanbaseTestplatformTaskQueryResponseModel : IEquatable<AnttechOceanbaseTestplatformTaskQueryResponseModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AnttechOceanbaseTestplatformTaskQueryResponseModel" /> class.
        /// </summary>
        /// <param name="branch">提测代码的分支.</param>
        /// <param name="commitId">提测代码仓库的commit id.</param>
        /// <param name="currentRetry">当前任务的运行（重试）次数.</param>
        /// <param name="gitRepo">代码仓库的url.</param>
        /// <param name="gmtCreate">任务创建的时间戳.</param>
        /// <param name="player">参赛选手的名字.</param>
        /// <param name="resultType">提测结果类型 默认1.</param>
        /// <param name="taskId">测试任务的Id.</param>
        /// <param name="testCases">二级提测题目.</param>
        /// <param name="testInfo">测试题目.</param>
        /// <param name="testSuite">一级提测题目.</param>
        public AnttechOceanbaseTestplatformTaskQueryResponseModel(string branch = default(string), string commitId = default(string), string currentRetry = default(string), string gitRepo = default(string), string gmtCreate = default(string), string player = default(string), int resultType = default(int), int taskId = default(int), string testCases = default(string), string testInfo = default(string), string testSuite = default(string))
        {
            this.Branch = branch;
            this.CommitId = commitId;
            this.CurrentRetry = currentRetry;
            this.GitRepo = gitRepo;
            this.GmtCreate = gmtCreate;
            this.Player = player;
            this.ResultType = resultType;
            this.TaskId = taskId;
            this.TestCases = testCases;
            this.TestInfo = testInfo;
            this.TestSuite = testSuite;
        }

        /// <summary>
        /// 提测代码的分支
        /// </summary>
        /// <value>提测代码的分支</value>
        [DataMember(Name = "branch", EmitDefaultValue = false)]
        public string Branch { get; set; }

        /// <summary>
        /// 提测代码仓库的commit id
        /// </summary>
        /// <value>提测代码仓库的commit id</value>
        [DataMember(Name = "commit_id", EmitDefaultValue = false)]
        public string CommitId { get; set; }

        /// <summary>
        /// 当前任务的运行（重试）次数
        /// </summary>
        /// <value>当前任务的运行（重试）次数</value>
        [DataMember(Name = "current_retry", EmitDefaultValue = false)]
        public string CurrentRetry { get; set; }

        /// <summary>
        /// 代码仓库的url
        /// </summary>
        /// <value>代码仓库的url</value>
        [DataMember(Name = "git_repo", EmitDefaultValue = false)]
        public string GitRepo { get; set; }

        /// <summary>
        /// 任务创建的时间戳
        /// </summary>
        /// <value>任务创建的时间戳</value>
        [DataMember(Name = "gmt_create", EmitDefaultValue = false)]
        public string GmtCreate { get; set; }

        /// <summary>
        /// 参赛选手的名字
        /// </summary>
        /// <value>参赛选手的名字</value>
        [DataMember(Name = "player", EmitDefaultValue = false)]
        public string Player { get; set; }

        /// <summary>
        /// 提测结果类型 默认1
        /// </summary>
        /// <value>提测结果类型 默认1</value>
        [DataMember(Name = "result_type", EmitDefaultValue = false)]
        public int ResultType { get; set; }

        /// <summary>
        /// 测试任务的Id
        /// </summary>
        /// <value>测试任务的Id</value>
        [DataMember(Name = "task_id", EmitDefaultValue = false)]
        public int TaskId { get; set; }

        /// <summary>
        /// 二级提测题目
        /// </summary>
        /// <value>二级提测题目</value>
        [DataMember(Name = "test_cases", EmitDefaultValue = false)]
        public string TestCases { get; set; }

        /// <summary>
        /// 测试题目
        /// </summary>
        /// <value>测试题目</value>
        [DataMember(Name = "test_info", EmitDefaultValue = false)]
        public string TestInfo { get; set; }

        /// <summary>
        /// 一级提测题目
        /// </summary>
        /// <value>一级提测题目</value>
        [DataMember(Name = "test_suite", EmitDefaultValue = false)]
        public string TestSuite { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AnttechOceanbaseTestplatformTaskQueryResponseModel {\n");
            sb.Append("  Branch: ").Append(Branch).Append("\n");
            sb.Append("  CommitId: ").Append(CommitId).Append("\n");
            sb.Append("  CurrentRetry: ").Append(CurrentRetry).Append("\n");
            sb.Append("  GitRepo: ").Append(GitRepo).Append("\n");
            sb.Append("  GmtCreate: ").Append(GmtCreate).Append("\n");
            sb.Append("  Player: ").Append(Player).Append("\n");
            sb.Append("  ResultType: ").Append(ResultType).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TestCases: ").Append(TestCases).Append("\n");
            sb.Append("  TestInfo: ").Append(TestInfo).Append("\n");
            sb.Append("  TestSuite: ").Append(TestSuite).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AnttechOceanbaseTestplatformTaskQueryResponseModel);
        }

        /// <summary>
        /// Returns true if AnttechOceanbaseTestplatformTaskQueryResponseModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AnttechOceanbaseTestplatformTaskQueryResponseModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnttechOceanbaseTestplatformTaskQueryResponseModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Branch == input.Branch ||
                    (this.Branch != null &&
                    this.Branch.Equals(input.Branch))
                ) && 
                (
                    this.CommitId == input.CommitId ||
                    (this.CommitId != null &&
                    this.CommitId.Equals(input.CommitId))
                ) && 
                (
                    this.CurrentRetry == input.CurrentRetry ||
                    (this.CurrentRetry != null &&
                    this.CurrentRetry.Equals(input.CurrentRetry))
                ) && 
                (
                    this.GitRepo == input.GitRepo ||
                    (this.GitRepo != null &&
                    this.GitRepo.Equals(input.GitRepo))
                ) && 
                (
                    this.GmtCreate == input.GmtCreate ||
                    (this.GmtCreate != null &&
                    this.GmtCreate.Equals(input.GmtCreate))
                ) && 
                (
                    this.Player == input.Player ||
                    (this.Player != null &&
                    this.Player.Equals(input.Player))
                ) && 
                (
                    this.ResultType == input.ResultType ||
                    this.ResultType.Equals(input.ResultType)
                ) && 
                (
                    this.TaskId == input.TaskId ||
                    this.TaskId.Equals(input.TaskId)
                ) && 
                (
                    this.TestCases == input.TestCases ||
                    (this.TestCases != null &&
                    this.TestCases.Equals(input.TestCases))
                ) && 
                (
                    this.TestInfo == input.TestInfo ||
                    (this.TestInfo != null &&
                    this.TestInfo.Equals(input.TestInfo))
                ) && 
                (
                    this.TestSuite == input.TestSuite ||
                    (this.TestSuite != null &&
                    this.TestSuite.Equals(input.TestSuite))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Branch != null)
                {
                    hashCode = (hashCode * 59) + this.Branch.GetHashCode();
                }
                if (this.CommitId != null)
                {
                    hashCode = (hashCode * 59) + this.CommitId.GetHashCode();
                }
                if (this.CurrentRetry != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentRetry.GetHashCode();
                }
                if (this.GitRepo != null)
                {
                    hashCode = (hashCode * 59) + this.GitRepo.GetHashCode();
                }
                if (this.GmtCreate != null)
                {
                    hashCode = (hashCode * 59) + this.GmtCreate.GetHashCode();
                }
                if (this.Player != null)
                {
                    hashCode = (hashCode * 59) + this.Player.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ResultType.GetHashCode();
                hashCode = (hashCode * 59) + this.TaskId.GetHashCode();
                if (this.TestCases != null)
                {
                    hashCode = (hashCode * 59) + this.TestCases.GetHashCode();
                }
                if (this.TestInfo != null)
                {
                    hashCode = (hashCode * 59) + this.TestInfo.GetHashCode();
                }
                if (this.TestSuite != null)
                {
                    hashCode = (hashCode * 59) + this.TestSuite.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
