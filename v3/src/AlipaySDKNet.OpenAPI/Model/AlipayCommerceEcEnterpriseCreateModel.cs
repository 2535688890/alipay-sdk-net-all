/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 2023-06-06
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = AlipaySDKNet.OpenAPI.Client.OpenAPIDateConverter;

namespace AlipaySDKNet.OpenAPI.Model
{
    /// <summary>
    /// AlipayCommerceEcEnterpriseCreateModel
    /// </summary>
    [DataContract(Name = "AlipayCommerceEcEnterpriseCreateModel")]
    public partial class AlipayCommerceEcEnterpriseCreateModel : IEquatable<AlipayCommerceEcEnterpriseCreateModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AlipayCommerceEcEnterpriseCreateModel" /> class.
        /// </summary>
        /// <param name="bizScene">场景码，联系支付宝分配.</param>
        /// <param name="createIotGroup">是否创建企业人脸库，适用于对接团餐刷脸付、门禁刷脸通行等场景；不传默认创建，创建失败不会阻塞企业的创建；如果传true且创建失败，则会阻塞企业的创建。.</param>
        /// <param name="enterpriseAlias">企业简称.</param>
        /// <param name="enterpriseName">企业名称.</param>
        /// <param name="identity">身份，对应身份类型进行传参，例如： 企业支付宝登录账号(支持手机号或者邮箱)或企业支付宝会员id(对应2088开头的支付宝会员id).</param>
        /// <param name="identityOpenId">当identity_type为ALIPAY_USER_ID时，此字段传入open_id.</param>
        /// <param name="identityType">身份类型,目前支持传参如下： ALIPAY_LOGON_ID(企业支付宝登录账号) ALIPAY_USER_ID(企业支付宝会员id).</param>
        /// <param name="outBizNo">外部业务号 1.作为创建该企业的唯一幂等标识，不传默认使用identity幂等 2.传入out_biz_no创建返回结果成功后，如需再新建其他企业，则out_biz_no传不同的参数，否则会被幂等 3.如果调用失败或者超时，可以使用相同的outBizNo进行重试处理 4.并发使用相同outBizNo调用，会返回企业创建中，不要重复操作的错误信息.</param>
        public AlipayCommerceEcEnterpriseCreateModel(string bizScene = default(string), bool createIotGroup = default(bool), string enterpriseAlias = default(string), string enterpriseName = default(string), string identity = default(string), string identityOpenId = default(string), string identityType = default(string), string outBizNo = default(string))
        {
            this.BizScene = bizScene;
            this.CreateIotGroup = createIotGroup;
            this.EnterpriseAlias = enterpriseAlias;
            this.EnterpriseName = enterpriseName;
            this.Identity = identity;
            this.IdentityOpenId = identityOpenId;
            this.IdentityType = identityType;
            this.OutBizNo = outBizNo;
        }

        /// <summary>
        /// 场景码，联系支付宝分配
        /// </summary>
        /// <value>场景码，联系支付宝分配</value>
        [DataMember(Name = "biz_scene", EmitDefaultValue = false)]
        public string BizScene { get; set; }

        /// <summary>
        /// 是否创建企业人脸库，适用于对接团餐刷脸付、门禁刷脸通行等场景；不传默认创建，创建失败不会阻塞企业的创建；如果传true且创建失败，则会阻塞企业的创建。
        /// </summary>
        /// <value>是否创建企业人脸库，适用于对接团餐刷脸付、门禁刷脸通行等场景；不传默认创建，创建失败不会阻塞企业的创建；如果传true且创建失败，则会阻塞企业的创建。</value>
        [DataMember(Name = "create_iot_group", EmitDefaultValue = true)]
        public bool CreateIotGroup { get; set; }

        /// <summary>
        /// 企业简称
        /// </summary>
        /// <value>企业简称</value>
        [DataMember(Name = "enterprise_alias", EmitDefaultValue = false)]
        public string EnterpriseAlias { get; set; }

        /// <summary>
        /// 企业名称
        /// </summary>
        /// <value>企业名称</value>
        [DataMember(Name = "enterprise_name", EmitDefaultValue = false)]
        public string EnterpriseName { get; set; }

        /// <summary>
        /// 身份，对应身份类型进行传参，例如： 企业支付宝登录账号(支持手机号或者邮箱)或企业支付宝会员id(对应2088开头的支付宝会员id)
        /// </summary>
        /// <value>身份，对应身份类型进行传参，例如： 企业支付宝登录账号(支持手机号或者邮箱)或企业支付宝会员id(对应2088开头的支付宝会员id)</value>
        [DataMember(Name = "identity", EmitDefaultValue = false)]
        public string Identity { get; set; }

        /// <summary>
        /// 当identity_type为ALIPAY_USER_ID时，此字段传入open_id
        /// </summary>
        /// <value>当identity_type为ALIPAY_USER_ID时，此字段传入open_id</value>
        [DataMember(Name = "identity_open_id", EmitDefaultValue = false)]
        public string IdentityOpenId { get; set; }

        /// <summary>
        /// 身份类型,目前支持传参如下： ALIPAY_LOGON_ID(企业支付宝登录账号) ALIPAY_USER_ID(企业支付宝会员id)
        /// </summary>
        /// <value>身份类型,目前支持传参如下： ALIPAY_LOGON_ID(企业支付宝登录账号) ALIPAY_USER_ID(企业支付宝会员id)</value>
        [DataMember(Name = "identity_type", EmitDefaultValue = false)]
        public string IdentityType { get; set; }

        /// <summary>
        /// 外部业务号 1.作为创建该企业的唯一幂等标识，不传默认使用identity幂等 2.传入out_biz_no创建返回结果成功后，如需再新建其他企业，则out_biz_no传不同的参数，否则会被幂等 3.如果调用失败或者超时，可以使用相同的outBizNo进行重试处理 4.并发使用相同outBizNo调用，会返回企业创建中，不要重复操作的错误信息
        /// </summary>
        /// <value>外部业务号 1.作为创建该企业的唯一幂等标识，不传默认使用identity幂等 2.传入out_biz_no创建返回结果成功后，如需再新建其他企业，则out_biz_no传不同的参数，否则会被幂等 3.如果调用失败或者超时，可以使用相同的outBizNo进行重试处理 4.并发使用相同outBizNo调用，会返回企业创建中，不要重复操作的错误信息</value>
        [DataMember(Name = "out_biz_no", EmitDefaultValue = false)]
        public string OutBizNo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AlipayCommerceEcEnterpriseCreateModel {\n");
            sb.Append("  BizScene: ").Append(BizScene).Append("\n");
            sb.Append("  CreateIotGroup: ").Append(CreateIotGroup).Append("\n");
            sb.Append("  EnterpriseAlias: ").Append(EnterpriseAlias).Append("\n");
            sb.Append("  EnterpriseName: ").Append(EnterpriseName).Append("\n");
            sb.Append("  Identity: ").Append(Identity).Append("\n");
            sb.Append("  IdentityOpenId: ").Append(IdentityOpenId).Append("\n");
            sb.Append("  IdentityType: ").Append(IdentityType).Append("\n");
            sb.Append("  OutBizNo: ").Append(OutBizNo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AlipayCommerceEcEnterpriseCreateModel);
        }

        /// <summary>
        /// Returns true if AlipayCommerceEcEnterpriseCreateModel instances are equal
        /// </summary>
        /// <param name="input">Instance of AlipayCommerceEcEnterpriseCreateModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AlipayCommerceEcEnterpriseCreateModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BizScene == input.BizScene ||
                    (this.BizScene != null &&
                    this.BizScene.Equals(input.BizScene))
                ) && 
                (
                    this.CreateIotGroup == input.CreateIotGroup ||
                    this.CreateIotGroup.Equals(input.CreateIotGroup)
                ) && 
                (
                    this.EnterpriseAlias == input.EnterpriseAlias ||
                    (this.EnterpriseAlias != null &&
                    this.EnterpriseAlias.Equals(input.EnterpriseAlias))
                ) && 
                (
                    this.EnterpriseName == input.EnterpriseName ||
                    (this.EnterpriseName != null &&
                    this.EnterpriseName.Equals(input.EnterpriseName))
                ) && 
                (
                    this.Identity == input.Identity ||
                    (this.Identity != null &&
                    this.Identity.Equals(input.Identity))
                ) && 
                (
                    this.IdentityOpenId == input.IdentityOpenId ||
                    (this.IdentityOpenId != null &&
                    this.IdentityOpenId.Equals(input.IdentityOpenId))
                ) && 
                (
                    this.IdentityType == input.IdentityType ||
                    (this.IdentityType != null &&
                    this.IdentityType.Equals(input.IdentityType))
                ) && 
                (
                    this.OutBizNo == input.OutBizNo ||
                    (this.OutBizNo != null &&
                    this.OutBizNo.Equals(input.OutBizNo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BizScene != null)
                {
                    hashCode = (hashCode * 59) + this.BizScene.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CreateIotGroup.GetHashCode();
                if (this.EnterpriseAlias != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseAlias.GetHashCode();
                }
                if (this.EnterpriseName != null)
                {
                    hashCode = (hashCode * 59) + this.EnterpriseName.GetHashCode();
                }
                if (this.Identity != null)
                {
                    hashCode = (hashCode * 59) + this.Identity.GetHashCode();
                }
                if (this.IdentityOpenId != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityOpenId.GetHashCode();
                }
                if (this.IdentityType != null)
                {
                    hashCode = (hashCode * 59) + this.IdentityType.GetHashCode();
                }
                if (this.OutBizNo != null)
                {
                    hashCode = (hashCode * 59) + this.OutBizNo.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
