/*
 * 支付宝开放平台API
 *
 * 支付宝开放平台v3协议文档
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;
using AlipaySDKNet.OpenAPI.Client;
using AlipaySDKNet.OpenAPI.Api;
// uncomment below to import models
using AlipaySDKNet.OpenAPI.Model;
using AlipaySDKNet.OpenAPI.Util;
using AlipaySDKNet.OpenAPI.Util.Model;
using Newtonsoft.Json;
using Xunit.Abstractions;

namespace AlipaySDKNet.OpenAPI.Test.Api
{
    /// <summary>
    ///  Class for testing OperationApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OperationApiTests : IDisposable
    {
        private AlipayTradeApi instance;
        private ITestOutputHelper output;
        private GenericExecuteApi api;

        private String privateKey =
            "";

        private String publicKey =
            "";

        public OperationApiTests(ITestOutputHelper output)
        {
            this.output = output;
            instance = new AlipayTradeApi();
            AlipayConfig alipayConfig = new AlipayConfig();
            // alipayConfig.AppId = "";
            // alipayConfig.PrivateKey = "";
            // alipayConfig.AlipayPublicKey = "";
            // alipayConfig.EncryptKey = "";

            alipayConfig.AppId = "";
            alipayConfig.PrivateKey =
                "";
            alipayConfig.AppCertPath = GetSolutionBasePath() +
                                       "/AlipaySDKNet.OpenAPI.Test/Cert/appCertPublicKey_2021003156675030.crt";
            alipayConfig.RootCertPath = GetSolutionBasePath() + "/AlipaySDKNet.OpenAPI.Test/Cert/alipayRootCert.crt";
            alipayConfig.AlipayPublicCertPath =
                GetSolutionBasePath() + "/AlipaySDKNet.OpenAPI.Test/Cert/alipayCertPublicKey_RSA2.crt";
            // alipayConfig.EncryptKey = "Yy860MatsGQujXalHsTKVg==";
            AlipayConfigUtil alipayConfigUtil = new AlipayConfigUtil(alipayConfig);
            instance.Client.SetAlipayConfigUtil(alipayConfigUtil);
            
            
            api = new GenericExecuteApi();
            api.Client.SetAlipayConfigUtil(alipayConfigUtil);
        }

        public static string GetSolutionBasePath()
        {
            string current = Directory.GetCurrentDirectory();
            do
            {
                current = Directory.GetParent(current).ToString();
            } while (!current.EndsWith("bin", StringComparison.Ordinal));

            return current + "/../..";
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OperationApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' OperationApi
            //Assert.IsType<OperationApi>(instance);
        }

        /// <summary>
        /// Test Query
        /// </summary>
        [Fact]
        public void QueryTest()
        {
            CustomizedParams customizedParams = new CustomizedParams();
            Dictionary<string, string> headerParams = new Dictionary<string, string>();
            headerParams.Add("alipay-request-id","333");
            customizedParams.HeaderParams = headerParams;
            
            AlipayTradePayModel alipayTradePayModel = new AlipayTradePayModel();
            alipayTradePayModel.OutTradeNo = "20210817010101001";
            alipayTradePayModel.TotalAmount = "0.011";
            alipayTradePayModel.Subject = "测试商品";
            alipayTradePayModel.Scene = "bar_code";
            alipayTradePayModel.AuthCode = "28763443825664394";
            try
            {
                AlipayTradePayResponseModel alipayTradePayResponseModel = instance.Pay(alipayTradePayModel, 0, customizedParams);
            }
            catch (ApiException e)
            {
                AlipayTradePayDefaultResponse errorObject = (AlipayTradePayDefaultResponse)e.ErrorObject;
                if (errorObject != null && errorObject.ActualInstance is CommonErrorType)
                {
                    var commonErrorType = errorObject.GetCommonErrorType();
                    output.WriteLine("CommonErrorType:" + commonErrorType.Code);
                }
                else if (errorObject != null && errorObject.ActualInstance is CommonErrorType)
                {
                    var responseModel = errorObject.GetAlipayTradePayErrorResponseModel();
                    output.WriteLine("AlipayTradePayErrorResponseModel:" + responseModel.Code);
                }
                else
                {
                    output.WriteLine("Exception when calling AlipayTradeApi.Pay: " + e.Message );
                    output.WriteLine("Status Code: "+ e.ErrorCode);
                    output.WriteLine(e.StackTrace);
                }
            }
        }

        [Fact]
        public void ExecuteTest2()
        {
            OpenApiGenericRequest request = new OpenApiGenericRequest();
            
            Dictionary<string, Object> pathParams = new Dictionary<string, Object>();
            pathParams["activity_id"] = "123";
            pathParams["voucher_code"] = "券码1";
            request.PathParams = pathParams;
            
            Dictionary<string, Object> queryParams = new Dictionary<string, Object>();
            queryParams["notify_url"] = "https://www.aaa.com";
            request.QueryParams = queryParams;
            
            Dictionary<string, Object> bizParams = new Dictionary<string, Object>();
            bizParams["merchant_access_mode"] = "特殊sss";
            bizParams["biz_dt"] = "2017-01-01 00:00:01";
            bizParams["out_biz_no"] = "1002600620019090123143254436";
            bizParams["total_fee"] = "999.99";
            request.BizParams = bizParams;
            
            ApiResponse<object> apiResponse = api.Execute("/v3/alipay/marketing/activity/{activity_id}/ordervoucher/{voucher_code}/refund", HttpMethod.Post, request);
            
        }

        [Fact]
        public void ExecuteTest3()
        {
            OpenApiGenericRequest request = new OpenApiGenericRequest();
            
            Dictionary<string, Object> bizParams = new Dictionary<string, Object>();
            bizParams["app_category_ids"] = "11_12;12_13";
            bizParams["app_english_name"] = "demoexample";
            bizParams["app_name"] = "杭州支小宝潮流女装店";
            bizParams["service_email"] = "example@mail.com";
            request.BizParams = bizParams;

            Dictionary<string, Stream> fileParams = new Dictionary<string, Stream>();
            fileParams["app_logo"] = new FileStream(
                    "AlipaySDKNet.OpenAPI.Test/Cert/pic.jpg",
                    FileMode.Open, FileAccess.Read);
            request.FileParams = fileParams;
            
            ApiResponse<object> apiResponse = api.Execute("/v3/alipay/open/mini/baseinfo/modify", HttpMethod.Post, request);

        }

        [Fact]
        public void ExecuteTest()
        {
            CustomizedParams customizedParams = new CustomizedParams();
// customizedParams.BodyContent = "{" +
//                                "    \"body\":\"对一笔交易的具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。\"," +
//                                "    \"subject\":\"大乐透\"," +
//                                "    \"out_trade_no\":\"70501111111S001111119\"," +
//                                "    \"timeout_express\":\"90m\"," +
//                                "    \"total_amount\":9.00," +
//                                "    \"product_code\":\"QUICK_WAP_WAY\"" +
//                                "  }";
            Dictionary<string, string> queryParams = new Dictionary<string, string>();
            queryParams["notify_url"] = "https://www.aaa.com";
            queryParams["return_url"] = "https://www.bbb.com";
            customizedParams.QueryParams = queryParams;

            Dictionary<string, Object> bizParams = new Dictionary<string, object>();
            Dictionary<string, Object> otherParams = new Dictionary<string, object>();
            otherParams.Add("body","对一笔交易的具体描述信息。如果是多种商品，请将商品描述字符串累加传给body。");
            otherParams.Add("subject","大乐透");
            otherParams.Add("out_trade_no","70501111111S001111119");
            otherParams.Add("timeout_express","90m");
            otherParams.Add("total_amount",9.00);
            otherParams.Add("product_code","QUICK_WAP_WAY");
            bizParams.Add("biz_content", otherParams);

            // AlipayMarketingActivityOrdervoucherAppendModel model = new AlipayMarketingActivityOrdervoucherAppendModel("1231xxq12312ty111112xxxxqqewx", "2.0.0", 15);
// bizParams.Add("biz_content", model);

            string response = api.PageExecute("alipay.trade.wap.pay", "POST", bizParams, "11223", null, customizedParams);
            // output.WriteLine(response);

            string response2 = api.PageExecute("alipay.trade.wap.pay", "GET", bizParams, "11223", null, customizedParams);
            output.WriteLine(response2);

            string response3 = api.SdkExecute("alipay.trade.wap.pay", bizParams, "11223", null, customizedParams);
            // output.WriteLine(response3);
        }

        [Fact]
        public void should_pass_check_v1_when_sign_is_self_generated()
        {
            //gien
            Dictionary<string, string> parameters = new Dictionary<string, string>
            {
                { "测试Key1", "测试Value1" },
                { "测试Key2", "测试Value2" }
            };
            parameters.Add("sign", AlipaySignature.Sign(parameters, this.privateKey, "UTF-8", "RSA2", false));
            parameters.Add("sign_type", "RSA2");

            //when
            bool result = AlipaySignature.VerifyV1(parameters, this.publicKey, "UTF-8", "RSA2", false);

            //then
            output.WriteLine("result:" + result);
        }
        
        [Fact]
        public void should_pass_rsa_check_v2_when_sign_is_self_generated()
        {
            //gien
            Dictionary<string, string> parameters = new Dictionary<string, string>
            {
                { "测试Key1", "测试Value1" },
                { "测试Key2", "测试Value2" },
                { "sign_type", "RSA2" }
            };
            parameters.Add("sign", AlipaySignature.Sign(parameters, privateKey, "UTF-8", "RSA2", false));


            //when
            bool result = AlipaySignature.VerifyV2(parameters, publicKey, "UTf-8", "rSa2", false);

            //then
            output.WriteLine("result:" + result);
        }

        [Fact]
        public void should_get_xml_contains_essential_nodes_after_encrypt_and_sign()
        {
            publicKey = "";
            privateKey = "";

            string result = AlipaySignature.EncryptAndSign("test", publicKey,
                privateKey, "UTF-8", true, true, "RSA2", false);
            output.WriteLine("result:" + result);
        }

        [Fact]
        public void should_get_exception_when_sign_not_match()
        {
            publicKey = "";
            privateKey = "";

            Dictionary<String, String> paramters = new Dictionary<string, string>
            {
                { "biz_content", "test" },
                { "charset", "UTF-8" },
                { "sign", "DFM24dXl9tfymSvZvmwcjutWWDoCwF2b/6CqUY2ZdShmnucUGxKqpmDF0m4lu5cm2AKx2KxvrfyOHrpZUBhX9i3YKqj0CV1jDjWBdcFI2gGnNQeShdqGGDhuHgtVeQE8cH/Q7LWSfrJ3EZqKyvCXsAX2GQ7SuhTPbIrq8mlflcIQHIUxUfoucc2F/vBdumwYQ3bT+2P4+7z89AFrPIDQ5A4dh1l3dkHbMTaJrFAz5bSvo5gqNyVV/TLts28HeHvAAYDfGP4eWm5knnh/3AulLdOkj0+m8L/YUR9tUMvNMSB6IJFF7keKq4s6qovfXPJYGZUNfuWKp9EJwDALGD53zg=="}
            };

            AlipaySignature.CheckSignAndDecrypt(
                paramters, publicKey, privateKey, true, true, "RSA", false);
        }
    }
}